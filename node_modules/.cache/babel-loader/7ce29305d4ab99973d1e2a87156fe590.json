{"ast":null,"code":"'use strict';\n\nconst Collection = require('../util/Collection');\n\nlet Structures;\n/**\n * Manages the API methods of a data model and holds its cache.\n * @abstract\n */\n\nclass BaseManager {\n  constructor(client, iterable, holds, cacheType = Collection, ...cacheOptions) {\n    if (!Structures) Structures = require('../util/Structures');\n    /**\n     * The data structure belonging to this manager\n     * @name BaseManager#holds\n     * @type {Function}\n     * @private\n     * @readonly\n     */\n\n    Object.defineProperty(this, 'holds', {\n      value: Structures.get(holds.name) || holds\n    });\n    /**\n     * The client that instantiated this Manager\n     * @name BaseManager#client\n     * @type {Client}\n     * @readonly\n     */\n\n    Object.defineProperty(this, 'client', {\n      value: client\n    });\n    /**\n     * The type of Collection of the Manager\n     * @type {Collection}\n     */\n\n    this.cacheType = cacheType;\n    /**\n     * Holds the cache for the data model\n     * @type {Collection}\n     */\n\n    this.cache = new cacheType(...cacheOptions);\n    if (iterable) for (const i of iterable) this.add(i);\n  }\n\n  add(data, cache = true, {\n    id,\n    extras = []\n  } = {}) {\n    const existing = this.cache.get(id || data.id);\n    if (existing && existing._patch && cache) existing._patch(data);\n    if (existing) return existing;\n    const entry = this.holds ? new this.holds(this.client, data, ...extras) : data;\n    if (cache) this.cache.set(id || entry.id, entry);\n    return entry;\n  }\n  /**\n   * Resolves a data entry to a data Object.\n   * @param {string|Object} idOrInstance The id or instance of something in this Manager\n   * @returns {?Object} An instance from this Manager\n   */\n\n\n  resolve(idOrInstance) {\n    if (idOrInstance instanceof this.holds) return idOrInstance;\n    if (typeof idOrInstance === 'string') return this.cache.get(idOrInstance) || null;\n    return null;\n  }\n  /**\n   * Resolves a data entry to a instance ID.\n   * @param {string|Object} idOrInstance The id or instance of something in this Manager\n   * @returns {?Snowflake}\n   */\n\n\n  resolveID(idOrInstance) {\n    if (idOrInstance instanceof this.holds) return idOrInstance.id;\n    if (typeof idOrInstance === 'string') return idOrInstance;\n    return null;\n  }\n\n  valueOf() {\n    return this.cache;\n  }\n\n}\n\nmodule.exports = BaseManager;","map":{"version":3,"sources":["C:/Users/sajid/node_modules/discord.js/src/managers/BaseManager.js"],"names":["Collection","require","Structures","BaseManager","constructor","client","iterable","holds","cacheType","cacheOptions","Object","defineProperty","value","get","name","cache","i","add","data","id","extras","existing","_patch","entry","set","resolve","idOrInstance","resolveID","valueOf","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,UAAU,GAAGC,OAAO,CAAC,oBAAD,CAA1B;;AACA,IAAIC,UAAJ;AAEA;AACA;AACA;AACA;;AACA,MAAMC,WAAN,CAAkB;AAChBC,EAAAA,WAAW,CAACC,MAAD,EAASC,QAAT,EAAmBC,KAAnB,EAA0BC,SAAS,GAAGR,UAAtC,EAAkD,GAAGS,YAArD,EAAmE;AAC5E,QAAI,CAACP,UAAL,EAAiBA,UAAU,GAAGD,OAAO,CAAC,oBAAD,CAApB;AACjB;AACJ;AACA;AACA;AACA;AACA;AACA;;AACIS,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,OAA5B,EAAqC;AAAEC,MAAAA,KAAK,EAAEV,UAAU,CAACW,GAAX,CAAeN,KAAK,CAACO,IAArB,KAA8BP;AAAvC,KAArC;AAEA;AACJ;AACA;AACA;AACA;AACA;;AACIG,IAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,QAA5B,EAAsC;AAAEC,MAAAA,KAAK,EAAEP;AAAT,KAAtC;AAEA;AACJ;AACA;AACA;;AACI,SAAKG,SAAL,GAAiBA,SAAjB;AAEA;AACJ;AACA;AACA;;AACI,SAAKO,KAAL,GAAa,IAAIP,SAAJ,CAAc,GAAGC,YAAjB,CAAb;AACA,QAAIH,QAAJ,EAAc,KAAK,MAAMU,CAAX,IAAgBV,QAAhB,EAA0B,KAAKW,GAAL,CAASD,CAAT;AACzC;;AAEDC,EAAAA,GAAG,CAACC,IAAD,EAAOH,KAAK,GAAG,IAAf,EAAqB;AAAEI,IAAAA,EAAF;AAAMC,IAAAA,MAAM,GAAG;AAAf,MAAsB,EAA3C,EAA+C;AAChD,UAAMC,QAAQ,GAAG,KAAKN,KAAL,CAAWF,GAAX,CAAeM,EAAE,IAAID,IAAI,CAACC,EAA1B,CAAjB;AACA,QAAIE,QAAQ,IAAIA,QAAQ,CAACC,MAArB,IAA+BP,KAAnC,EAA0CM,QAAQ,CAACC,MAAT,CAAgBJ,IAAhB;AAC1C,QAAIG,QAAJ,EAAc,OAAOA,QAAP;AAEd,UAAME,KAAK,GAAG,KAAKhB,KAAL,GAAa,IAAI,KAAKA,KAAT,CAAe,KAAKF,MAApB,EAA4Ba,IAA5B,EAAkC,GAAGE,MAArC,CAAb,GAA4DF,IAA1E;AACA,QAAIH,KAAJ,EAAW,KAAKA,KAAL,CAAWS,GAAX,CAAeL,EAAE,IAAII,KAAK,CAACJ,EAA3B,EAA+BI,KAA/B;AACX,WAAOA,KAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,OAAO,CAACC,YAAD,EAAe;AACpB,QAAIA,YAAY,YAAY,KAAKnB,KAAjC,EAAwC,OAAOmB,YAAP;AACxC,QAAI,OAAOA,YAAP,KAAwB,QAA5B,EAAsC,OAAO,KAAKX,KAAL,CAAWF,GAAX,CAAea,YAAf,KAAgC,IAAvC;AACtC,WAAO,IAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,SAAS,CAACD,YAAD,EAAe;AACtB,QAAIA,YAAY,YAAY,KAAKnB,KAAjC,EAAwC,OAAOmB,YAAY,CAACP,EAApB;AACxC,QAAI,OAAOO,YAAP,KAAwB,QAA5B,EAAsC,OAAOA,YAAP;AACtC,WAAO,IAAP;AACD;;AAEDE,EAAAA,OAAO,GAAG;AACR,WAAO,KAAKb,KAAZ;AACD;;AApEe;;AAuElBc,MAAM,CAACC,OAAP,GAAiB3B,WAAjB","sourcesContent":["'use strict';\n\nconst Collection = require('../util/Collection');\nlet Structures;\n\n/**\n * Manages the API methods of a data model and holds its cache.\n * @abstract\n */\nclass BaseManager {\n  constructor(client, iterable, holds, cacheType = Collection, ...cacheOptions) {\n    if (!Structures) Structures = require('../util/Structures');\n    /**\n     * The data structure belonging to this manager\n     * @name BaseManager#holds\n     * @type {Function}\n     * @private\n     * @readonly\n     */\n    Object.defineProperty(this, 'holds', { value: Structures.get(holds.name) || holds });\n\n    /**\n     * The client that instantiated this Manager\n     * @name BaseManager#client\n     * @type {Client}\n     * @readonly\n     */\n    Object.defineProperty(this, 'client', { value: client });\n\n    /**\n     * The type of Collection of the Manager\n     * @type {Collection}\n     */\n    this.cacheType = cacheType;\n\n    /**\n     * Holds the cache for the data model\n     * @type {Collection}\n     */\n    this.cache = new cacheType(...cacheOptions);\n    if (iterable) for (const i of iterable) this.add(i);\n  }\n\n  add(data, cache = true, { id, extras = [] } = {}) {\n    const existing = this.cache.get(id || data.id);\n    if (existing && existing._patch && cache) existing._patch(data);\n    if (existing) return existing;\n\n    const entry = this.holds ? new this.holds(this.client, data, ...extras) : data;\n    if (cache) this.cache.set(id || entry.id, entry);\n    return entry;\n  }\n\n  /**\n   * Resolves a data entry to a data Object.\n   * @param {string|Object} idOrInstance The id or instance of something in this Manager\n   * @returns {?Object} An instance from this Manager\n   */\n  resolve(idOrInstance) {\n    if (idOrInstance instanceof this.holds) return idOrInstance;\n    if (typeof idOrInstance === 'string') return this.cache.get(idOrInstance) || null;\n    return null;\n  }\n\n  /**\n   * Resolves a data entry to a instance ID.\n   * @param {string|Object} idOrInstance The id or instance of something in this Manager\n   * @returns {?Snowflake}\n   */\n  resolveID(idOrInstance) {\n    if (idOrInstance instanceof this.holds) return idOrInstance.id;\n    if (typeof idOrInstance === 'string') return idOrInstance;\n    return null;\n  }\n\n  valueOf() {\n    return this.cache;\n  }\n}\n\nmodule.exports = BaseManager;\n"]},"metadata":{},"sourceType":"script"}